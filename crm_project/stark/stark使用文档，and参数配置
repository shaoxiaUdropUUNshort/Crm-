1. 将STARK 组件， 拷贝到项目中。

2. 每个 业务app 中创建 stark.py 文件。。 并引入 site 对象。 进行注册url
	- from stark.servers.start_v1 import site
	- from web import models
	
		def register(self, model_class, handler_class=None, prev=None):
        '''
        :param model_class:  是model中数据库相关类。 接受一个类而不是对象
        :param handler_class: 处理请求的视图函数，所在的类
        :param prev:  为生成的url增加一个前缀
        :return:
        '''

3. 为每一张表，创建一个  handler 类。 并且此类必须继承  STARKHANDLER 并且进行注册
	from stark.servers.start_v1 import site
	from web import models
	from web.views.school import SchoolHandler
	from web.views.department import DepartmentHandler
	from web.views.userinfo import UserInfoHandler
	from web.views.course import CourseHandler
	from web.views.classlist import ClassListHandler
	from web.views.public_customer import PublicCustomerHandler
	from web.views.private_customer import PrivateCustomerHandler
	from web.views.consul_record import ConsultRecordHandler
	from web.views.payment_record import PaymentRecordHandler
	from web.views.check_payment_record import CheckPaymentRecordHandler
	from web.views.student import StudentHandler
	from web.views.scorerecord import ScoreRecordHandler
	from web.views.courserecord import CourseRecordHandler


	site.register(models.School, SchoolHandler)
	site.register(models.Department, DepartmentHandler)
	site.register(models.UserInfo, UserInfoHandler)
	site.register(models.Course, CourseHandler)
	site.register(models.ClassList, ClassListHandler)
	site.register(models.Customer, PublicCustomerHandler, "pub")
	site.register(models.Customer, PrivateCustomerHandler, "pri")
	site.register(models.ConsultRecord, ConsultRecordHandler,)
	site.register(models.PaymentRecord, PaymentRecordHandler,)
	site.register(models.PaymentRecord, CheckPaymentRecordHandler, "check")
	site.register(models.Student, StudentHandler)
	site.register(models.ScoreRecord, ScoreRecordHandler)
	site.register(models.CourseRecord, CourseRecordHandler)
	
4. HANDLER类，参数配置：
	- list_display 为一个列表。 列表中填写。表中的想要展示的字段。
		对于 choice 字段和 manytomanu 外键关联的字段。使用 get_choice_text,get_manytomany_text,
		时间的格式化  get_datetime_text
		    list_display = ["customer", "consultant", get_choice_text("缴费类型", "pay_type"),
                    "paid_fee", "class_list",get_datetime_text("申请日期", "apply_date"), get_choice_text("状态", "confirm_status")
	
	has_add_btn = False  控制页面添加按钮。
	def get_add_btn(self, request, *args, **kwargs):
        '''预留钩子，子类中重写该方法。 根据权限的判断是否显示添加按钮'''
	
	# 用于在 a 标签。 携带本次GET 请求参数
	def memory_url  携带本次请求参数，生成url
	
	# 用于 跳转会原页面时，解析出 GET 请求的参数。并拼接
	def memory_reverse  解析 momory_url 生成的url
	
	# 用于用户自定制， chackbox 复选框！ 进行批量操作使用
	def display_checkbox
	
	# 用户自定制，是否使用该功能。 只要在子类中的 action_list=[StarkHandler.multi_delete] 就可以使用该功能
	def action_multi_delete
	
	# 用于用户自定制， 是否显示编辑按钮, 和显示的样式
	def display_edit
	
	# 用于用户自定制， 是否显示删除按钮
	def display_del
	
	# 将编辑和删除操作，放到一列中
	def display_edit_and_display_del
	
	# 获取 可以为list_display 额外添加。字段
	def get_list_display
	
	# 排序规则由 用户指定
	ordered_list = [] 
	
	# 方便，用户自己定制。关键字搜索的条件，和如果用户不配置，页面不显示搜索框
	search_list = []
	
	# 方便，用户自己定制。组合搜索搜索的条件，和如果用户不配置，页面不显示组合搜索
	search_group = []
		- 此列表，与class Option(object): 组合使用。 进行组合筛选框的显示
	
	# 对要查询的内容做一次扩展，子类中根据需求扩展,(我这里用于公户私户的数据的筛选)
	def get_queryset
	
	# 默认每页显示，多少数据。 也可在子类中，自行定制
	# per_page = 10
	
	# 批量操作函数，添加列表。 添加函数，不要添加方法
	action_list = []
	
	# # 预留自定义form对象的.(这个针对的是 添加和编辑窗口) 查看请自行添加
	# model_form_class = None
		- 此自定义form 请继承class StarkModelForm  样式的基类。 也可自行扩展
	
	# 预留的 form 保存。自定制接口
	 def save
		- 当自定义的modelform 中。显示的字段比数据库少时。 保存时需要为少的字段添加默认值， 重写该方法
	
	# 编辑时扩展，过滤条件
	def get_change_object
	
	# '''扩展删除，过滤条件'''
	def get_delete_object
	
	# 用户可自定制，该函数。 指定需要显示，那种url 。增加或删除。
	def get_urls(self):
	
	# 只适用于增加url
	def extra_url(self):
	
5. 关于form 插件：
    对于form应用插件。 读取的也是某一个html文件。
    可在 stark/templates/stark/forms/widgets 下，创建自己的 模板 展示的样式。
    stark/froms/ 下可以继承，原 form 组件。的 input 框类。  template_name = "自己的插件地址"

	之后再，应用中，就可以将。想要的插件。 通过form组件的 widgets 为某个字段，添加自己想要的样式
	    class DateTimeModelForm(PermissionHandler,StartHandler):
            class Meta:
                model = models.ClassList
                fields = "__all__"
                widgets = {
                    "start_date": DateTimePickerInput,
                    "graduate_date": DateTimePickerInput,
                }

     之间的依赖等。 可以直接放到 BASE.html 中。 也可以只放到，其他需要地方。

6. 分页类的参数配置
    class Pagination(object):
    def __init__(self, current_page, all_count, base_url, query_params, per_page=20, pager_page_count=11):
        """
        分页初始化
        :param current_page: 当前页码
        :param per_page: 每页显示数据条数
        :param all_count: 数据库中总条数
        :param base_url: 基础URL
        :param query_params: QueryDict对象，内部含所有当前URL的原条件
        :param pager_page_count: 页面上最多显示的页码数量
        """